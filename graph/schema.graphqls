type User @goModel(model: "github.com/nebisin/gograph/db.User") {
  id: ID!
  email: String!
  displayName: String
  tweets (limit: Int = 10, page: Int = 1): [Tweet!]! @goField(forceResolver: true)
  createdAt: Time!
  updatedAt: Time!
}

type Tweet @goModel(model: "github.com/nebisin/gograph/db.Tweet") {
  id: ID!
  content: String!
  authorId: ID!
  author: User! @goField(forceResolver: true)
  createdAt: Time!
  updatedAt: Time!
}

type Query {
  getTweet(id: ID!): Tweet!
  listTweet(limit: Int = 10, page: Int = 1): [Tweet!]!
  getUser(id: ID!): User!
}

type Mutation {
  createTweet(input: CreateTweetParams!): Tweet!
  updateTweet(input: UpdateTweetParams!): Tweet!
  deleteTweet(id: ID!): Boolean!
}

input CreateTweetParams @goModel(model: "github.com/nebisin/gograph/db.CreateTweetParams") {
  content: String!
  authorId: ID!
}

input UpdateTweetParams @goModel(model: "github.com/nebisin/gograph/db.UpdateTweetParams") {
  id: ID!
  content: String!
}

scalar Time

directive @goModel(model: String, models: [String!]) on OBJECT
  | INPUT_OBJECT
  | SCALAR
  | ENUM
  | INTERFACE
  | UNION

directive @goField(forceResolver: Boolean, name: String) on INPUT_FIELD_DEFINITION
  | FIELD_DEFINITION